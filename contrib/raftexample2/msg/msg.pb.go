// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg.proto

package msg

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Command struct {
	CliId    uint32   `protobuf:"varint,1,opt,name=CliId,proto3" json:"CliId,omitempty"`
	CliSeq   uint32   `protobuf:"varint,2,opt,name=CliSeq,proto3" json:"CliSeq,omitempty"`
	SvrSeq   uint32   `protobuf:"varint,3,opt,name=SvrSeq,proto3" json:"SvrSeq,omitempty"`
	Commands []string `protobuf:"bytes,4,rep,name=Commands,proto3" json:"Commands,omitempty"`
}

func (m *Command) Reset()      { *m = Command{} }
func (*Command) ProtoMessage() {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCliId() uint32 {
	if m != nil {
		return m.CliId
	}
	return 0
}

func (m *Command) GetCliSeq() uint32 {
	if m != nil {
		return m.CliSeq
	}
	return 0
}

func (m *Command) GetSvrSeq() uint32 {
	if m != nil {
		return m.SvrSeq
	}
	return 0
}

func (m *Command) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

type ConsensusObj struct {
	ProId    uint32   `protobuf:"varint,1,opt,name=ProId,proto3" json:"ProId,omitempty"`
	ProSeq   uint32   `protobuf:"varint,2,opt,name=ProSeq,proto3" json:"ProSeq,omitempty"`
	SvrSeq   uint32   `protobuf:"varint,3,opt,name=SvrSeq,proto3" json:"SvrSeq,omitempty"`
	IsNull   bool     `protobuf:"varint,4,opt,name=IsNull,proto3" json:"IsNull,omitempty"`
	CliIds   []uint32 `protobuf:"varint,5,rep,packed,name=CliIds,proto3" json:"CliIds,omitempty"`
	CliSeqs  []uint32 `protobuf:"varint,6,rep,packed,name=CliSeqs,proto3" json:"CliSeqs,omitempty"`
	Commands []string `protobuf:"bytes,7,rep,name=Commands,proto3" json:"Commands,omitempty"`
}

func (m *ConsensusObj) Reset()      { *m = ConsensusObj{} }
func (*ConsensusObj) ProtoMessage() {}
func (*ConsensusObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{1}
}
func (m *ConsensusObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusObj.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusObj.Merge(m, src)
}
func (m *ConsensusObj) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusObj) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusObj.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusObj proto.InternalMessageInfo

func (m *ConsensusObj) GetProId() uint32 {
	if m != nil {
		return m.ProId
	}
	return 0
}

func (m *ConsensusObj) GetProSeq() uint32 {
	if m != nil {
		return m.ProSeq
	}
	return 0
}

func (m *ConsensusObj) GetSvrSeq() uint32 {
	if m != nil {
		return m.SvrSeq
	}
	return 0
}

func (m *ConsensusObj) GetIsNull() bool {
	if m != nil {
		return m.IsNull
	}
	return false
}

func (m *ConsensusObj) GetCliIds() []uint32 {
	if m != nil {
		return m.CliIds
	}
	return nil
}

func (m *ConsensusObj) GetCliSeqs() []uint32 {
	if m != nil {
		return m.CliSeqs
	}
	return nil
}

func (m *ConsensusObj) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

func init() {
	proto.RegisterType((*Command)(nil), "msg.Command")
	proto.RegisterType((*ConsensusObj)(nil), "msg.ConsensusObj")
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor_c06e4cca6c2cc899) }

var fileDescriptor_c06e4cca6c2cc899 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x3f, 0x4e, 0xc3, 0x30,
	0x14, 0xc6, 0xfd, 0x48, 0x9b, 0xb4, 0x16, 0x2c, 0x11, 0xaa, 0xac, 0x0e, 0x4f, 0x51, 0xa7, 0x2c,
	0xb4, 0x03, 0x9c, 0x80, 0x4c, 0x59, 0xa0, 0x4a, 0x4f, 0x40, 0x48, 0x09, 0x81, 0x24, 0x86, 0xb8,
	0x61, 0xe6, 0x08, 0x1c, 0x83, 0x33, 0x70, 0x02, 0xc6, 0x8c, 0x1d, 0x89, 0xb3, 0x30, 0xf6, 0x08,
	0x28, 0xb6, 0xf9, 0xd3, 0x81, 0xcd, 0xbf, 0xef, 0xc9, 0xef, 0xfb, 0xd9, 0x74, 0x5c, 0x88, 0x74,
	0xfe, 0x50, 0xf1, 0x0d, 0x77, 0xad, 0x42, 0xa4, 0xd3, 0x93, 0x34, 0xdb, 0xdc, 0xd6, 0xf1, 0xfc,
	0x9a, 0x17, 0x8b, 0x94, 0xa7, 0x7c, 0xa1, 0x66, 0x71, 0x7d, 0xa3, 0x48, 0x81, 0x3a, 0xe9, 0x3b,
	0xb3, 0x7b, 0xea, 0x04, 0xbc, 0x28, 0xae, 0xca, 0xc4, 0x3d, 0xa6, 0xc3, 0x20, 0xcf, 0xc2, 0x84,
	0x81, 0x07, 0xfe, 0x51, 0xa4, 0xc1, 0x9d, 0x50, 0x3b, 0xc8, 0xb3, 0xd5, 0xfa, 0x91, 0x1d, 0xa8,
	0xd8, 0x50, 0x9f, 0xaf, 0x9e, 0xaa, 0x3e, 0xb7, 0x74, 0xae, 0xc9, 0x9d, 0xd2, 0x91, 0x59, 0x28,
	0xd8, 0xc0, 0xb3, 0xfc, 0x71, 0xf4, 0xc3, 0xb3, 0x37, 0xa0, 0x87, 0x01, 0x2f, 0xc5, 0xba, 0x14,
	0xb5, 0xb8, 0x8c, 0xef, 0xfa, 0xca, 0x65, 0xc5, 0x7f, 0x2b, 0x15, 0xf4, 0xab, 0x97, 0x15, 0xff,
	0x53, 0xa9, 0xe9, 0xdf, 0xca, 0x09, 0xb5, 0x43, 0x71, 0x51, 0xe7, 0x39, 0x1b, 0x78, 0xe0, 0x8f,
	0x22, 0x43, 0x46, 0x3d, 0x4c, 0x04, 0x1b, 0x7a, 0x96, 0x51, 0x0f, 0x13, 0xe1, 0x32, 0xea, 0xe8,
	0x47, 0x08, 0x66, 0xab, 0xc1, 0x37, 0xee, 0xc9, 0x3b, 0xfb, 0xf2, 0xe7, 0x67, 0x4d, 0x8b, 0x64,
	0xdb, 0x22, 0xd9, 0xb5, 0x08, 0xcf, 0x12, 0xe1, 0x55, 0x22, 0xbc, 0x4b, 0x84, 0x46, 0x22, 0x7c,
	0x48, 0x84, 0x4f, 0x89, 0x64, 0x27, 0x11, 0x5e, 0x3a, 0x24, 0x4d, 0x87, 0x64, 0xdb, 0x21, 0x89,
	0x6d, 0xf5, 0xcd, 0xa7, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x34, 0x32, 0x70, 0xa7, 0x01,
	0x00, 0x00,
}

func (this *Command) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command)
	if !ok {
		that2, ok := that.(Command)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CliId != that1.CliId {
		return false
	}
	if this.CliSeq != that1.CliSeq {
		return false
	}
	if this.SvrSeq != that1.SvrSeq {
		return false
	}
	if len(this.Commands) != len(that1.Commands) {
		return false
	}
	for i := range this.Commands {
		if this.Commands[i] != that1.Commands[i] {
			return false
		}
	}
	return true
}
func (this *ConsensusObj) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusObj)
	if !ok {
		that2, ok := that.(ConsensusObj)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProId != that1.ProId {
		return false
	}
	if this.ProSeq != that1.ProSeq {
		return false
	}
	if this.SvrSeq != that1.SvrSeq {
		return false
	}
	if this.IsNull != that1.IsNull {
		return false
	}
	if len(this.CliIds) != len(that1.CliIds) {
		return false
	}
	for i := range this.CliIds {
		if this.CliIds[i] != that1.CliIds[i] {
			return false
		}
	}
	if len(this.CliSeqs) != len(that1.CliSeqs) {
		return false
	}
	for i := range this.CliSeqs {
		if this.CliSeqs[i] != that1.CliSeqs[i] {
			return false
		}
	}
	if len(this.Commands) != len(that1.Commands) {
		return false
	}
	for i := range this.Commands {
		if this.Commands[i] != that1.Commands[i] {
			return false
		}
	}
	return true
}
func (this *Command) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msg.Command{")
	s = append(s, "CliId: "+fmt.Sprintf("%#v", this.CliId)+",\n")
	s = append(s, "CliSeq: "+fmt.Sprintf("%#v", this.CliSeq)+",\n")
	s = append(s, "SvrSeq: "+fmt.Sprintf("%#v", this.SvrSeq)+",\n")
	s = append(s, "Commands: "+fmt.Sprintf("%#v", this.Commands)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusObj) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&msg.ConsensusObj{")
	s = append(s, "ProId: "+fmt.Sprintf("%#v", this.ProId)+",\n")
	s = append(s, "ProSeq: "+fmt.Sprintf("%#v", this.ProSeq)+",\n")
	s = append(s, "SvrSeq: "+fmt.Sprintf("%#v", this.SvrSeq)+",\n")
	s = append(s, "IsNull: "+fmt.Sprintf("%#v", this.IsNull)+",\n")
	s = append(s, "CliIds: "+fmt.Sprintf("%#v", this.CliIds)+",\n")
	s = append(s, "CliSeqs: "+fmt.Sprintf("%#v", this.CliSeqs)+",\n")
	s = append(s, "Commands: "+fmt.Sprintf("%#v", this.Commands)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsg(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commands) > 0 {
		for iNdEx := len(m.Commands) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Commands[iNdEx])
			copy(dAtA[i:], m.Commands[iNdEx])
			i = encodeVarintMsg(dAtA, i, uint64(len(m.Commands[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.SvrSeq != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.SvrSeq))
		i--
		dAtA[i] = 0x18
	}
	if m.CliSeq != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.CliSeq))
		i--
		dAtA[i] = 0x10
	}
	if m.CliId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.CliId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusObj) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusObj) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commands) > 0 {
		for iNdEx := len(m.Commands) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Commands[iNdEx])
			copy(dAtA[i:], m.Commands[iNdEx])
			i = encodeVarintMsg(dAtA, i, uint64(len(m.Commands[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.CliSeqs) > 0 {
		dAtA2 := make([]byte, len(m.CliSeqs)*10)
		var j1 int
		for _, num := range m.CliSeqs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMsg(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CliIds) > 0 {
		dAtA4 := make([]byte, len(m.CliIds)*10)
		var j3 int
		for _, num := range m.CliIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintMsg(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsNull {
		i--
		if m.IsNull {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.SvrSeq != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.SvrSeq))
		i--
		dAtA[i] = 0x18
	}
	if m.ProSeq != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ProSeq))
		i--
		dAtA[i] = 0x10
	}
	if m.ProId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ProId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CliId != 0 {
		n += 1 + sovMsg(uint64(m.CliId))
	}
	if m.CliSeq != 0 {
		n += 1 + sovMsg(uint64(m.CliSeq))
	}
	if m.SvrSeq != 0 {
		n += 1 + sovMsg(uint64(m.SvrSeq))
	}
	if len(m.Commands) > 0 {
		for _, s := range m.Commands {
			l = len(s)
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func (m *ConsensusObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProId != 0 {
		n += 1 + sovMsg(uint64(m.ProId))
	}
	if m.ProSeq != 0 {
		n += 1 + sovMsg(uint64(m.ProSeq))
	}
	if m.SvrSeq != 0 {
		n += 1 + sovMsg(uint64(m.SvrSeq))
	}
	if m.IsNull {
		n += 2
	}
	if len(m.CliIds) > 0 {
		l = 0
		for _, e := range m.CliIds {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	if len(m.CliSeqs) > 0 {
		l = 0
		for _, e := range m.CliSeqs {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	if len(m.Commands) > 0 {
		for _, s := range m.Commands {
			l = len(s)
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Command) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command{`,
		`CliId:` + fmt.Sprintf("%v", this.CliId) + `,`,
		`CliSeq:` + fmt.Sprintf("%v", this.CliSeq) + `,`,
		`SvrSeq:` + fmt.Sprintf("%v", this.SvrSeq) + `,`,
		`Commands:` + fmt.Sprintf("%v", this.Commands) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConsensusObj) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConsensusObj{`,
		`ProId:` + fmt.Sprintf("%v", this.ProId) + `,`,
		`ProSeq:` + fmt.Sprintf("%v", this.ProSeq) + `,`,
		`SvrSeq:` + fmt.Sprintf("%v", this.SvrSeq) + `,`,
		`IsNull:` + fmt.Sprintf("%v", this.IsNull) + `,`,
		`CliIds:` + fmt.Sprintf("%v", this.CliIds) + `,`,
		`CliSeqs:` + fmt.Sprintf("%v", this.CliSeqs) + `,`,
		`Commands:` + fmt.Sprintf("%v", this.Commands) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsg(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CliId", wireType)
			}
			m.CliId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CliId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CliSeq", wireType)
			}
			m.CliSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CliSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrSeq", wireType)
			}
			m.SvrSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProId", wireType)
			}
			m.ProId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProSeq", wireType)
			}
			m.ProSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrSeq", wireType)
			}
			m.SvrSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNull = bool(v != 0)
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CliIds = append(m.CliIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsg
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CliIds) == 0 {
					m.CliIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CliIds = append(m.CliIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CliIds", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CliSeqs = append(m.CliSeqs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsg
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CliSeqs) == 0 {
					m.CliSeqs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CliSeqs = append(m.CliSeqs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CliSeqs", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
